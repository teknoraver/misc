#!/bin/sh
# Copyright (C) 2012-2018 Matteo Croce <mcroce@redhat.com>
#       Released under GPL v3.
#
# Usage: kernel_patch_incr [patch|sub]
#

[ -f Makefile ] || exec echo 'Invalid source tree'

ver=$(awk '/^VERSION/{print$3}' Makefile)
patch=$(awk '/^PATCHLEVEL/{print$3}' Makefile)
sub=$(awk '/^SUBLEVEL/{print$3}' Makefile)

[ -n "$ver" ] && [ -n "$patch" ] && [ -n "$sub" ] || exec echo 'Invalid source tree' 2>&1

echo "Current kernel: $ver.$patch.$sub"

dl() {
	if curl -V >/dev/null 2>/dev/null; then
		curl -L "$1"
	elif wget -V >/dev/null 2>/dev/null; then
		wget -qO- "$1"
	else
		echo 'Neither wget or curl were found' >&2
		return 1
	fi
}

up_sub() {
	# if the patchlevel isn't 0 downgrade to X.Y.0
	if [ $sub -gt 0 ]; then
		url=
		next=$((sub - 1))
		while [ $sub -gt 0 ] ; do
			if [ $next -ne 0 ]; then
				url="$url http://cdn.kernel.org/pub/linux/kernel/v$ver.x/incr/patch-$ver.$patch.$next-$sub.xz"
			else
				url="$url http://cdn.kernel.org/pub/linux/kernel/v$ver.x/patch-$ver.$patch.$sub.xz"
			fi
			sub=$next
			next=$((next - 1))
		done

		echo "Downgrading to version: $ver.$patch.$sub"

		# convert the patch output in a status line
		dl $url |xz -d |patch -p1 -R |sed -u 's/$/                                          /' |tr '[\n]' '[\r]'
		echo
	fi

	# now upgrade to latest rev available
	sub=1
	while wget -q --spider http://cdn.kernel.org/pub/linux/kernel/v$ver.x/patch-$ver.$patch.$sub.xz; do
		sub=$((sub + 1))
	done
	sub=$((sub - 1))
	[ $sub -eq 0 ] && exit
	url="http://cdn.kernel.org/pub/linux/kernel/v$ver.x/patch-$ver.$patch.$sub.xz"

	echo "Upgrading to version: $ver.$patch.$sub"

	dl $url |xz -d |patch -p1 |sed -u 's/$/                                          /' |tr '[\n]' '[\r]'
	echo
}

up_patch(){
	# downgrade to X.Y.0
	if [ $sub -gt 0 ]; then
		url=
		next=$((sub - 1))
		while [ $sub -gt 0 ] ; do
			if [ $next -ne 0 ]; then
				url="$url http://cdn.kernel.org/pub/linux/kernel/v$ver.x/incr/patch-$ver.$patch.$next-$sub.xz"
			else
				url="$url http://cdn.kernel.org/pub/linux/kernel/v$ver.x/patch-$ver.$patch.$sub.xz"
			fi
			sub=$next
			next=$((next - 1))
		done

		echo "Downgrading to version: $ver.$patch.$sub"

		dl $url |xz -d |patch -p1 -R |sed -u 's/$/                                          /' |tr '[\n]' '[\r]'
		echo
	fi

	# find the latest rev
	url=
	patch=$((patch + 1))
	while wget -q --spider http://cdn.kernel.org/pub/linux/kernel/v$ver.x/patch-$ver.$patch.xz; do
		url="$url http://cdn.kernel.org/pub/linux/kernel/v$ver.x/patch-$ver.$patch.xz"
		patch=$((patch + 1))
	done
	patch=$((patch - 1))

	# upgrade to latest patchlevel if necessary
	if [ -n "$url" ]; then
		echo "Upgrading to version: $ver.$patch.$sub"
		dl $url |xz -d |patch -p1 |sed -u 's/$/                                          /' |tr '[\n]' '[\r]'
		echo
	fi
}

case $1 in
patch)
	up_patch
	up_sub
	;;

sub)
	up_sub
	;;

*)
	echo "usage: $0 [patch|sub]"
	echo "	patch will upgrade to latest kernel version"
	echo "	sub will upgrade only to latest subversion of current version"
esac
